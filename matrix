#!/bin/bash
#*********citation some code modeled from required reading********
#344 assignment 1 
#David Passaro
#passarod   
#Matrix operations, dimensions shown, addition, multiplication, transposition, mean of each column
#
#All provided input must be via stdin or file as tab demiminated string numbers,  and must be  
#rectangular

#The following comment describes the logic for determining pipe or argument input which is repeated in every 
#function. The comment is also along the actual code in only dims function (to save space)
#
#trap the signals hang up, SIGINT, and TERM and delete temp files
#check if arguments number is equal to 0
#if so create a file for holding input from stdin 
#else if we have not 0 and not 1 output to stderr and exit 1 SIGINT error
#as we have no stdin input or argument file input 
#if the first argument in this scope exists and is readable
# (outside function scope will have the function call as $1)
#error stderr and exit 1
#at this point if no inputD then we have cmd line file args   
#if the inputD file does not exist then create it and fill with input from stdin  
 
dims () {
  # NAME: dims
  #   
  # SYNOPSIS
  #   output dimensions of matrix as ROWS COLS
  # DESCRIPTION
  #   Outputs a matricies ROWS and COLS as dimensions as -"Rows Cols". 
  # AUTHOR
  #   Written by David Passaro passarod@oregonstate.edu

    trap "rm -f $inputD; exit" INT  HUP TERM
    #trap the signals hang up, SIGINT, and TERM and delete temp files
    #check if arguments number is equal to 0
    if [ "$#" -eq 0 ]
    then
    #if so create a file for holding input from stdin 
        inputD="inputDims$$"
        touch $inputD
        cat > $inputD
    elif [ "$#" -ne 1 ]
    then
    #else if we have not 0 and not 1 output to stderr and exit 1 SIGINT error
    #as we have no stdin input or argument file input 
        echo "error" 1>&2
        exit 1
    elif [ ! -e $1 ] || [ ! -r $1 ]
    then   
    #if the first argument in this scope exists and is readable
    # (outside function scope will have the function call as $1)
    #error stderr and exit 1
        echo "error" 1>&2
        exit 1
    fi
    lineNum=0
    count=0
    inputD="inputDims$$"


    #if the inputD file does not exist then create it and fill with input from stdin
    #at this point if no inputD then we have cmd line file args   
    if [ ! -e $inputD ]  
    then    
        touch $inputD
        cat $1 > $inputD
    fi
    read myline < $inputD #read one line from file and do for loop on nums in line
                          #to grab the column number
    for i in $myline    
    do
        count=`expr $count + 1`
    done 

    while read myLine   #read entire doc line by line for the line number (global variables)
    do                  #using a counter variable 
        lineNum=`expr $lineNum + 1`
    done < $inputD
    printf "$lineNum "
    printf "$count\n"
    rm -f $inputD
    #print the rows and then col and remove temp files then 
    #return zero
    return 0
}


transpose () {
  # NAME: transpose
  #   
  # SYNOPSIS
  #   Shifts matrix from horisontal to vertical and vice versa.
  # DESCRIPTION
  #   Outputs a matricies shifted ROWS X COLS to COLS X ROWS". Top row will be First Column. 
  # AUTHOR
  #   Written by David Passaro passarod@oregonstate.edu
    if [ "$#" -eq 0 ]
    then
        input=inputFile$$
        touch $input
        cat > $input

    elif [ "$#" -ne 1 ]
    then
        echo "error" 1>&2
        exit 1
    elif [ ! -e $1 ] || [ ! -r $1 ]
    then   
        echo "error" 1>&2
        exit 1
    fi
   
    input="inputFile$$"
    if [ ! -e $input ]  
    then    
        input=inputFile$$
        touch $input
        cat $1 > $input
    fi
    tmpCol="tmpColFile"
    touch $tmpCol$$ #named with PID
    fnlCol="fnlColFile"
    touch $fnlCol$$ #named with PID
    trap "rm -f $tmpCol$$; rm -f $fnlCol$$; rm -f $input; exit;" INT  HUP TERM
    tmp="tmptrp$$"
    touch $tmp
    cat $input > $tmp 
    #doing a sort of hacky trick because calling dims seemed to delete the input file
    dims $input > /dev/null #get the size with dim --count = rows lineNum = col
    cat $tmp > $input
    rm -f $tmp
    i=1
    #for loop on columns 
    while [ $i -le $count ]
    do
      
        cut -f $i $input > $tmpCol$$
         #cut fields of cols one by one put in tmpCol
         #from input file

        i=`expr $i + 1`
        cat $tmpCol$$ | tr '\n' '\t' >> "$fnlCol$$"
         #take tmpCol and append on fnlCol with newlines as tabs
         #to create shift sideways of matrix
        truncate -s-1  $fnlCol$$
        echo "" >> $fnlCol$$    #add newline at end
         
    done < $input
    #output and delete tmp files 
    cat  $fnlCol$$
    rm -f $input
    rm -f $fnlCol$$
    rm -f $tmpCol$$ 
    return 0
}


mean () {
  # NAME: mean
  #   
  # SYNOPSIS
  #   Outputs`1-D` averaged columns of input matrix  
  # DESCRIPTION
  #   Outputs the averaged value of each column input 
  # AUTHOR
  #   Written by David Passaro passarod@oregonstate.edu
    if [ "$#" -eq 0 ]
    then
        input=inputFile$$
        touch $input
        cat > $input

    elif [ "$#" -ne 1 ]
    then
        echo "error" 1>&2
        exit 1
    elif [ ! -e $1 ]  || [ ! -r $1 ]
    then   
        echo "error" 1>&2
        exit 1
    fi
   
    input="inputFile$$"
    if [ ! -e $input ]  
    then    
        input=inputFile$$
        touch $input
        cat $1 > $input
    fi
    #open files and set trap and get dimensions of input matrix
    tmpCol="tmpColFile"
    touch $tmpCol$$ #named with PID
    fnlCol="fnlColFile"
    touch $fnlCol$$ #named with PID
    trap "rm -f $tmpCol$$; rm -f $fnlCol$$; rm -f $input; exit; " INT  HUP TERM
    tmp="tmpfileM$$"
    touch $tmp
    cat $input > $tmp
    dims $input > /dev/null #get the size with dim --count = rows lineNum = col (global)
    cat $tmp > $input
    rm -f $tmp
i=1
while [ $i -le $count ]
    do
        cut -f $i $input > $tmpCol$$ #cut fields of cols one by one put in tmpCol

        sum=0
        j=0
        while read myfile #read line into loop 
        do
            sum=$(($sum + $myfile)) #sum up line into sum var
        done < $tmpCol$$
        sum=$(( ($sum + ($lineNum/2)*( ($sum>0)*2-1 )) / $lineNum ))
         #formula for proper rounding in div cited from assignment
        printf  -- "%s\t" "$sum"  >> "$fnlCol$$"
        #append to file with tabs
        i=`expr $i + 1`

    done < $input
    truncate -s-1  $fnlCol$$ 
    #cut off last tab and put \n
    echo "" >> $fnlCol$$
    cat  $fnlCol$$
    #output
    rm -f $input
    rm -f $fnlCol$$
    rm -f $tmpCol$$ #get rid of tempfile
    return 0

}










add () {
  # NAME: add
  #   
  # SYNOPSIS
  #   Outputs values of two input matricies added together
  # DESCRIPTION
#   Outputs values of two input matricies added rounding up on .5 and down on .4. Must be same dimensions
  # AUTHOR
  #   Written by David Passaro passarod@oregonstate.edu
    if [ "$#" -ne 2 ]
    then
        echo "error" 1>&2
        exit 1
    elif [ ! -e $1 ] || [ ! -r $1 ]
    then   
        echo "error" 1>&2
        exit 1
    elif [ ! -e $2 ] || [ ! -r $2 ]
    then   
        echo "error" 1>&2
        exit 1
    fi
    
    tmpCol="tmpColFile"
    touch $tmpCol$$ #named with PID
    fnlCol="fnlColFile"
    touch $fnlCol$$ #named with PID
    final="FinalFile"
    touch $final$$ #named with PID
    trap "rm -f $tmpCol$$; rm -f $fnlCol$$; rm -f $final$$; exit;" INT  HUP TERM
    
    dims $1 > $final$$ #get the size with dim --   r1= rows c1  = col of first matrix
    counter=0
    #grab the dimensions of the 2 matricies
    r1=$lineNum
    c1=$count
    dims $2 > $final$$ #get the size with dim --  r2 = rows c2 = col of second matrix input
    r2=$lineNum
    c2=$count
    printf "" > $final$$
    if [ $r1 -ne $r2 ] || [ $c2 -ne $c1 ]
    then 
        echo   "Matrix sizes not equal for add operation, exiting"  1>&2
        #if the row and col sizes don't match respectivly then exit 1 & stderr 
        rm -f $fnlCol$$  
        rm -f $tmpCol$$ 
        rm -f $final$$ #get rid of tempfiles
        exit 1
    fi
    dims $1 > /dev/null 

    i=1

    sum=0

    while [ $i -le $lineNum ] #for each line (should be same)
    do
        cat $1 | head -n $i | tail -n 1 > $tmpCol$$  #throw specified line in tmpCol file
        cat $2 | head -n $i | tail -n 1 > $fnlCol$$
        read myline1 < $tmpCol$$
        read myline2 < $fnlCol$$
        counter1=0
        for j in $myline1 #double for loop for adding correct positions in input file to output file 
                          #hacky solution :(
        do
            ((counter1++))
            counter2=0 #reset
            for k in $myline2
            do
                ((counter2++))
                if [ $counter1 -eq $counter2 ]
                then
                    sum=$(($j + $k)) #sum up line into sum var
                    if [ $counter2 -eq $count ]
                    #put newline on last in line
                    then
                        printf -- "%s\n" "$sum" >> $final$$ 
                    else 
                        printf -- "%s\t" "$sum" >> $final$$ 
                    fi
                fi
            done
        done
        i=`expr $i + 1`      #inc i
    done 

    cat  $final$$   
    rm -f $fnlCol$$  
    rm -f $tmpCol$$ 
    rm -f $final$$ #get rid of tempfiles
    return 0

}


multiply () {
  # NAME: multiply
  #   
  # SYNOPSIS
  #   Outputs values of two input matricies multiplied together
  # DESCRIPTION
  #   Outputs values of two input matricies multiplied must be 
  #dimensions AXB to BXC Rows by Column 
  # AUTHOR
  #   Written by David Passaro passarod@oregonstate.edu
    if [ "$#" -ne 2 ]
    then
        echo "error" 1>&2
        exit 1
    elif [ ! -e $1 ] || [ ! -r $1 ]
    then   
        echo "error" 1>&2
        exit 1
    elif [ ! -e $2 ] || [ ! -r $2 ]
    then   
        echo "error" 1>&2
        exit 1
    fi
    
    tmp="tmpColFile$$"
    touch $tmp #named with PID

    final="FinalFile$$"
    touch $final #named with PID
    trap "rm -f $final; rm -f $tmp; exit; " INT  HUP TERM

    dims $1 > $final #get the size with dim --   r1= rows c1  = col of first matrix
    counter=0
    #grab the dimensions of the 2 matricies
    dims $1 > $final #get the size with dim --   r1= rows c1  = col of first matrix
    r1=$lineNum
    c1=$count
     dims $2 > $final #get the size with dim --  r2 = rows c2 = col of second matrix input
    r2=$lineNum
    c2=$count
    printf "" > $final
    printf "" > $final
    i=1
    sum=0
    #here is triple nested loop
    #first is i 1 to r1
        #second j to c2
            #third k to c1
                #inside we use cat | head | tail | cut > tmp to 
                #select x y coord in matrix for mult in M1 and M2, 
                #we do in R1 from  top row of matrix 1 multiplying 
                #with column 1 of M2 collecting the sum of the 
                #multiplications, then printing the sum as the if statement
                #is "j"= "c2" is satisfied. Then row M1 to next cols of m2 
                #until row two does the similar multiplications
                #and printing 
    if [ $c1 -ne $r2 ]
    then 
        echo   "Matrix 1 columns not equal to Matrix 2 rows for multiply operation, exiting"  1>&2
        rm -f $tmp 
        rm -f $final 
        exit 1
    fi
    while [ $i -le $r1 ]
    do
        j=1
        while [ $j -le $c2 ]
        do  
            k=1
            while [ $k -le $c1 ]
            do  
                cat $1 | head -n $i | tail -n 1 | cut -f $k > $tmp  #throw specified line in tmpCol file y
                a=$(<$tmp)
                cat $2 | head -n $k | tail -n 1 | cut -f $j > $tmp  #throw specified line in tmpCol file y
                b=$(<$tmp)
                sum=$(( $sum+($a * $b) ))
                ((k++))
            done

            if [ $j -eq $c2 ]
            then
                printf -- "%s\n" "$sum" >> $final 
            else 
                printf -- "%s\t" "$sum" >> $final 
            fi
            sum=0
            ((j++))
        done
        ((i++))
    done
    
    cat  $final   
    rm -f $tmp  
    rm -f $final #get rid of tempfile
    return 0

}

#here we check the argument #1 for proper matrix function names 
if [ $1 != "dims" ] && [ $1 != "transpose" ] && [ $1 != "mean" ] && [ $1 != "add" ] && [ $1 != "multiply" ] 
    then
        echo "error" 1>&2
        exit 1
fi

#echo "got here"
$1 "${@:2}"
exit 0