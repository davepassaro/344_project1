#!/bin/bash
#*********citation some code used/modeled from required reading********
dim () {
    lineNum=0
    count=0
    read myline < $1   #read one line from file and do for loop on nums in line
    for i in $myline    
    do
        count=`expr $count + 1`
    done 

    while read myLine   #read entire doc line by line
    do
        lineNum=`expr $lineNum + 1`
    done < $1
    printf "$lineNum "
    printf "$count\n"
}

transpose () {
    tmpCol="tmpColFile"
    touch $tmpCol$$ #named with PID
    fnlCol="fnlColFile"
    touch $fnlCol$$ #named with PID
    dim $1 > /dev/null #get the size with dim --count = rows lineNum = col


i=1
while [ $i -le $count ]
    do
       # printf "%s\t%d\n" "i= " "$i"
        cut -f $i $1 > $tmpCol$$ #cut fields of cols one by one put in tmpCol
        #cat $tmpCol$$
        i=`expr $i + 1`
       
        cat $tmpCol$$ | tr '\n' '\t' >> "$fnlCol$$" #take tmpCol and append on fnlCol with newlines as tabs
        echo "" >> $fnlCol$$    #add newline at end !!!
        #!might have to change end to pass tests#$%$#$%$#  if =count skip changing to newline and echo skip
         
    done < $1

    cat $fnlCol$$
    echo ""
    cat -A $fnlCol$$
    rm -f $fnlCol$$ #get rid of tempfile
    rm -f $tmpCol$$ #get rid of tempfile
}

mean () {
    tmpCol="tmpColFile"
    touch $tmpCol$$ #named with PID
    fnlCol="fnlColFile"
    touch $fnlCol$$ #named with PID
    dim $1 > /dev/null #get the size with dim --count = rows lineNum = col

i=1
while [ $i -le $count ]
    do
       # printf "%s\t%d\n" "i= " "$i"
        cut -f $i $1 > $tmpCol$$ #cut fields of cols one by one put in tmpCol
        #cat $tmpCol$$
        sum=0
        j=0
        while read myfile #read line into loop 
        do
            sum=$(($sum + $myfile)) #sum up line into sum var
        done < $tmpCol$$
        sum=$(( ($sum + ($lineNum/2)*( ($sum>0)*2-1 )) / $lineNum )) #formula for proper rounding in div cited from assignment
       #printf -- "%s" "$sum"
        printf  -- "%s\t" "$sum"  >> "$fnlCol$$"
        i=`expr $i + 1`

    done < $1

    cat $fnlCol$$
    echo ""
   # cat -A $fnlCol$$  #test tabs newlines
    rm -f $fnlCol$$ #get rid of tempfile
    rm -f $tmpCol$$ #get rid of tempfile
}




add () {
    tmpCol="tmpColFile"
    touch $tmpCol$$ #named with PID
    fnlCol="fnlColFile"
    touch $fnlCol$$ #named with PID
    final="FinalFile"
    touch $final$$ #named with PID
    dim $1 > /dev/null #get the size with dim --count = rows lineNum = col

    i=1
    
    sum=0

   # go back to transpose if wrong shape matrix!!!!!!!!!!!!!!    
    while [ $i -le $lineNum ] #for each line (should be same)
    do
        echo "i = $i"
        cat $1 | head -n $i | tail -n 1 > $tmpCol$$  #throw specified line in tmpCol file
        cat $2 | head -n $i | tail -n 1 > $fnlCol$$
        read myline1 < $tmpCol$$
        read myline2 < $fnlCol$$
        #echo "$myline1"
        #echo "$myline2"
        counter1=0
        for j in $myline1 #double for loop for adding correct positions in input file to output file 
        do
            ((counter1++))
            #echo "here $j"
            counter2=0 #reset
            
            for k in $myline2
            do
                ((counter2++))
                #echo "here $j"
                if [ $counter1 -eq $counter2 ]
                then
                    #echo "liip"
                    #echo "$counter1 eq $counter2 "
                    #echo "$j and $k"
                    sum=$(($j + $k)) #sum up line into sum var

                    printf  -- "%s\t" "$sum"  >> "$final$$"
                fi
            done
        done
        echo "" >> $final$$
        
        i=`expr $i + 1`        #while [ $j -le $count ] #for each number in 1 line (should be same)
        
    done 
    
    cat  $final$$  #test tabs newlines
    rm -f $fnlCol$$ #get rid of tempfile
    rm -f $tmpCol$$ #get rid of tempfile
    rm -f $final$$ #get rid of tempfile

}
$1 "${@:2}"

        #mean notes ***cat $tmpCol$$ | tr '\n' '\t' >> "$fnlCol$$" #take tmpCol and append on fnlCol with newlines as tabs
        #echo "" >> $fnlCol$$    #add newline at end !!!!might have to change end to pass tests#$%$#$%$# 
        